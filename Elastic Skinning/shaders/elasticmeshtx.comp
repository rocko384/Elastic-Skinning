#version 450

#include "common.glsl"

layout(local_size_x = 256) in;

layout(std140, set = 0, binding = 0) readonly buffer BoneBuffer {
	Bone bones[];
} Skeleton;

layout(std140, set = 0, binding = 1) readonly buffer ElasticMeshBuffer {
	ElasticVertex vertices[];
} ElasticMesh;

layout(std140, set = 0, binding = 2) buffer OutMeshBuffer {
	Vertex vertices[];
} OutMesh;

layout(set = 0, binding = 3) uniform sampler3D Isogradfield;

layout(push_constant) uniform PushConstants {
	uint vertex_count;
	uint bone_count;
	float field_scale;
	ivec3 field_dims;
} Context;

void main() {
	uint gID = gl_GlobalInvocationID.x;

	if (gID < Context.vertex_count) {
		ElasticVertex inVert = ElasticMesh.vertices[gID];

		uint boneIdx = inVert.bone;

		Bone bone = Skeleton.bones[boneIdx];

		Vertex outVert;
		outVert.position = transform_by_bone(inVert.position, bone);
		outVert.normal = rotate_by_bone(inVert.normal, bone);
		outVert.color = inVert.color;
		outVert.texcoords = inVert.texcoords;

		// Vertex projection
		for (int i = 0; i < 4; i++) {
			vec3 fieldCoords = coords_to_sampler(outVert.position, Context.field_dims, Context.field_scale);
			vec4 isograd = texture(Isogradfield, fieldCoords);
			float restisoval = inVert.isovalue;
			float isoval = isograd.x;
			vec3 gradient = isograd.yzw;

			vec3 dir = (-gradient);// / (dot(gradient, gradient));

			outVert.position = outVert.position - (SIGMA * (isoval - restisoval) * dir);
		}

		OutMesh.vertices[gID] = outVert;

		//vec3 boneRelPos = (Skeleton.bones[boneIdx].inverse_bind_matrix * vec4(ElasticMesh.vertices[gID].position, 1.0)).xyz;

		//vec4 boneRot = Skeleton.bones[boneIdx].rotation;
		//vec3 bonePos = Skeleton.bones[boneIdx].position;

		//OutMesh.vertices[gID].position = vec_quat_rotate(boneRelPos, boneRot) + bonePos;
		//OutMesh.vertices[gID].normal = ElasticMesh.vertices[gID].normal;

		//OutMesh.vertices[gID].position = transform_by_bone(ElasticMesh.vertices[gID].position, Skeleton.bones[boneIdx]);
		//OutMesh.vertices[gID].normal = rotate_by_bone(ElasticMesh.vertices[gID].normal, Skeleton.bones[boneIdx]);

		//OutMesh.vertices[gID].color = ElasticMesh.vertices[gID].color;
		//OutMesh.vertices[gID].texcoords = ElasticMesh.vertices[gID].texcoords;
	}
}