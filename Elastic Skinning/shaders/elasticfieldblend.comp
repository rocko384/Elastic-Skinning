#version 450

#include "common.glsl"

float dc_theta(vec3 a, vec3 b) {
	float k = dot(a, b);

	if (k >= 0.0f) {
		return 0.0f;
	}

	float k_2 = k * k;
	float k_3 = k_2 * k;
	float k_4 = k_3 * k;
	float k_8 = k_4 * k_4;

	return (k_3 / 8.0f) * ((-40.0f) + (-55.0f * k) + (-21.0f * k_2) + (-k_3) + (-7.0f * k_4) + (4.0f * k_8));
}

float db_theta(vec3 a, vec3 b) {
	float k = dot(a, b);
	float k_3 = k * k * k;

	return (1.0f / 4.0f) * ((-3.0f * k) + k_3 + 2);
}

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(rgba32f, set = 0, binding = 1) uniform readonly image3D PartIsogradfieldA;
layout(rgba32f, set = 0, binding = 2) uniform readonly image3D PartIsogradfieldB;

layout(rgba32f, set = 0, binding = 3) uniform writeonly image3D OutIsogradfield;

void main() {
	ivec3 coords = ivec3(gl_GlobalInvocationID.xyz);

	vec4 isogradA = imageLoad(PartIsogradfieldA, coords);
	vec4 isogradB = imageLoad(PartIsogradfieldB, coords);

	vec3 gradA = isogradA.yzw;
	vec3 gradB = isogradB.yzw;

	vec3 normA = vec3(0, 0, 0);
	vec3 normB = vec3(0, 0, 0);

	if (length(gradA) > EPSILON) {
		normA = normalize(gradA);
	}
	
	if (length(gradB) > EPSILON) {
		normB = normalize(gradB);
	}

	
	float valA = isogradA.x;
	float valB = isogradB.x;

	float unionres = max(valA, valB);
	float blendres = valA + valB;

	float interp = dc_theta(normA, normB);
	
	vec3 gradOut = gradA + gradB;

	vec4 outVal = vec4(mix(unionres, blendres, interp), gradOut);
	
	/*
	vec4 unionres = isogradA;
	
	if (isogradB.x > isogradA.x) {
		unionres = isogradB;
	}

	vec4 blendres = isogradA + isogradB;

	float interp = dc_theta(normA, normB);

	vec4 outVal = mix(unionres, blendres, interp);
	*/

	imageStore(OutIsogradfield, coords, outVal);
}